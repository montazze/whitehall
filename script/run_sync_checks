require 'optparse'
require 'ruby-progressbar'

require 'gds_api/exceptions'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: run_sync_checks [options] ModelName"

  opts.on("-o", "--output FILE", "output results to a CSV file") do |f|
    options[:output] = f
  end

  opts.on("-f", "--only-failures", "only run with the failures from the last run") do |f|
    file = Rails.root.join("tmp/.sync_check_failures")
    if File.exist? file
      options[:ids] = File.readlines(file).map(&:to_i).uniq
    end
  end

  opts.on("-i", "--ids ID,ID,ID,...", Array, "only check or republish the specified ids") do |i|
    options[:ids] = i.map(&:to_i).uniq
  end

  opts.on("-r", "--republish", "republish the documents, then quit") do |r|
    options[:republish] = r
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

document_format = "SyncChecker::Formats::#{ARGV[0]}Check".constantize
documents = (
  if options[:ids]
    document_format.scope_with_ids(options[:ids])
  else
    document_format.scope
  end
)

if options[:republish]
  progress = ProgressBar.create(
    title: "Republishing",
    total: documents.count,
    format: "%e [%b>%i] [%c/%C]"
  )
  documents.pluck(:id).each do |id|
    begin
      document_format.republish(id)
    rescue GdsApi::TimedOutException, GdsApi::HTTPServerError
      progress.log "Timeout..."
      retry
    end
    progress.increment
  end
  progress.finish
  exit 0
end

checks = documents.map { |doc| document_format.new(doc) }
checker = SyncChecker::SyncCheck.new(checks, csv_file_path: options[:output])
checker.run
